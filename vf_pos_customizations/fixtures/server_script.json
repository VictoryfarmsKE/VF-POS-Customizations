[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-11 13:13:04.401962",
  "module": "VF POS Customizations",
  "name": "Send SMS after POS Invoice Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "POS Invoice",
  "script": "sms_settings = frappe.get_doc(\"SMS Settings\", \"SMS Settings\")\r\ntext_items = \"\"\r\n\r\nredeem_loyalty_points = int(doc.redeem_loyalty_points)\r\n\r\nif redeem_loyalty_points == 0:  \r\n    items = doc.items\r\n    \r\n    for item in items:\r\n        text_items = text_items + \\\r\n            f'{item.item_code} - {item.qty} {item.uom} - {doc.currency} {frappe.utils.fmt_money(item.amount)}<br />'\r\n            \r\n    rounded_total_qty = round(float(doc.total_qty), 3)\r\n    \r\n    # Fetch customer's loyalty points balance\r\n    loyalty_points_balance = 0\r\n    if doc.customer:\r\n        loyalty_entries = frappe.get_all(\r\n            \"Loyalty Point Entry\",\r\n            filters={\r\n                \"customer\": doc.customer,\r\n                \"expiry_date\": (\">=\", frappe.utils.today()),  # Use today's date\r\n            },\r\n            group_by=\"company\",\r\n            fields=[\"sum(loyalty_points) as loyalty_points\"],\r\n            as_list=False\r\n        )\r\n\r\n    # Sum up loyalty points if available\r\n    if loyalty_entries:\r\n        loyalty_points_balance = sum(entry[\"loyalty_points\"] or 0 for entry in loyalty_entries)\r\n\r\n\r\n    customer_name = f'Name :: {doc.customer_name} <br />'\r\n    invoice_no = f'Order :: {doc.name} <br />'\r\n    invoice_date = f'Date :: {frappe.utils.format_date(doc.posting_date,)} <br />'\r\n    invoice_time = f'Time :: {frappe.utils.format_time(doc.posting_time)} <br />'\r\n    invoice_status = f'Status :: {doc.status} <br />'\r\n    pos_profile = f'You were served at :: {doc.pos_profile} <br />'\r\n    items_header = f'<br />Items :: <br />'\r\n    total_qty = f'<br />Total Qty :: {str(rounded_total_qty)}<br />'\r\n    total_amount = f'Grand Total :: {doc.currency} {frappe.utils.fmt_money(doc.rounded_total)}<br /><br />'\r\n    terms_info1 = 'Pre-payment of goods is not allowed. <br />'\r\n    terms_info2 = 'All transactions are done in real-time. <br />'\r\n    terms_info3 = 'Always pay through the Victory Farms official till number.'\r\n    terms_info = f'{terms_info1}{terms_info2}{terms_info3}<br /><br />'\r\n\r\n    contact_mobile = doc.contact_mobile\r\n    if contact_mobile:\r\n        if contact_mobile.startswith('0'):\r\n            mobile_no = ['254' + contact_mobile[1:]]\r\n        else:\r\n            mobile_no = [contact_mobile]\r\n\r\n    # Loyalty Program Details\r\n    loyalty_program = f'Loyalty Program :: {doc.loyalty_program} <br /><br />'\r\n    loyalty_points_balance_msg = f'Loyalty Points Balance :: {loyalty_points_balance} <br /><br />'\r\n\r\n    # Final SMS message \r\n    message1 = f'{customer_name}{invoice_no}{invoice_date}{invoice_time}{invoice_status}{pos_profile}{items_header}{text_items}{total_qty}{total_amount}{terms_info}'\r\n\r\n    #SMS message for loyalty program \r\n    message2 = f'{customer_name}{invoice_no}{invoice_date}{invoice_time}{invoice_status}{pos_profile}{items_header}{text_items}{total_qty}{total_amount}{terms_info}{loyalty_program}{loyalty_points_balance_msg}'\r\n\r\n    if doc.loyalty_program:\r\n        message = message2\r\n    else:\r\n        message = message1\r\n    # Format for SMS (remove HTML line breaks)\r\n    message = str(message).replace('<br />', '\\n')\r\n\r\n    try:\r\n        if mobile_no:\r\n            # frappe.call(\"frappe.core.doctype.sms_settings.sms_settings.send_sms\", receiver_list = mobile_no, msg = message)\r\n            frappe.call(\"victoryfarmsdeveloper.victoryfarmsdeveloper.customization.sms_settings.sms_settings.send_sms\", receiver_list = mobile_no, msg = message)\r\n            \r\n    except frappe.QueryTimeoutError as e:\r\n        frappe.log_error(f\"Error sending sms {e}\")\r\n        # frappe.enqueue(frappe.call(\"frappe.core.doctype.sms_settings.sms_settings.send_sms\", receiver_list = mobile_no, msg = message), queue=\"long\", job_name=f\"{doc.name}_send_sms\", is_async=True)\r\n        frappe.enqueue(frappe.call(\"victoryfarmsdeveloper.victoryfarmsdeveloper.customization.sms_settings.sms_settings.send_sms\", receiver_list = mobile_no, msg = message), queue=\"long\", job_name=f\"{doc.name}_send_sms\", is_async=True)\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error sending sms {e}\")\r\n        frappe.msgprint(f\"Error sending sms {e}\")\r\nelse:\r\n    items = doc.items\r\n\r\n    for item in items:\r\n        text_items = text_items + \\\r\n            f'{item.item_code} - {item.qty} {item.uom}<br />'\r\n            \r\n    rounded_total_qty = round(float(doc.total_qty), 3)\r\n        # Fetch customer's loyalty points balance\r\n    loyalty_points_balance = 0  # Default value if no points found\r\n    if doc.customer:\r\n        loyalty_entries = frappe.get_all(\r\n            \"Loyalty Point Entry\",\r\n            filters={\r\n                \"customer\": doc.customer,\r\n                \"expiry_date\": (\">=\", frappe.utils.today()),  # Use today's date\r\n            },\r\n            group_by=\"company\",\r\n            fields=[\"sum(loyalty_points) as loyalty_points\"],\r\n            as_list=False\r\n        )\r\n\r\n    # Sum up loyalty points if available\r\n    if loyalty_entries:\r\n        loyalty_points_balance = sum(entry[\"loyalty_points\"] or 0 for entry in loyalty_entries)\r\n\r\n     # Build message body\r\n    intro_info = f'You have redeemed your {doc.loyalty_program} points for this order. <br /> <br />'\r\n\r\n    customer_name_info = f'Name :: {doc.customer_name} <br />'\r\n    # invoice_no = f'Order :: {name} <br />'\r\n    invoice_date = f'Date :: {frappe.utils.format_date(doc.posting_date,)}<br />'\r\n    invoice_time = f'Time :: {frappe.utils.format_time(doc.posting_time)} <br />'\r\n    invoice_status = f'Status :: Redeemed<br />'\r\n    pos_profile = f'You were served at :: {doc.pos_profile} <br />'\r\n    items_header = f'<br />Items :: '\r\n    total_qty = f'for {doc.loyalty_points} points <br /><br />Total Qty :: {str(rounded_total_qty)} <br /><br />'\r\n\r\n    loyalty_points_balance_msg = f'Loyalty Points Balance :: {loyalty_points_balance} <br /><br />'\r\n\r\n    thank_you = f'Thank you - Victory Farms. <br />'\r\n\r\n    # Final SMS message \r\n    message = f'{intro_info}{customer_name_info}{invoice_date}{invoice_time}{invoice_status}{pos_profile}{items_header}{text_items}{total_qty}{loyalty_points_balance_msg}{thank_you}'\r\n\r\n    # Format for SMS (remove HTML line breaks)\r\n    message = str(message).replace('<br />', '\\n')\r\n\r\n    contact_mobile = doc.contact_mobile\r\n    if contact_mobile:\r\n        if contact_mobile.startswith('0'):\r\n            mobile_no = ['254' + contact_mobile[1:]]\r\n        else:\r\n            mobile_no = [contact_mobile]\r\n\r\n    # Send SMS\r\n    try:\r\n        if mobile_no:\r\n            # frappe.call(\"frappe.core.doctype.sms_settings.sms_settings.send_sms\", receiver_list = mobile_no, msg = message)\r\n            frappe.call(\"victoryfarmsdeveloper.victoryfarmsdeveloper.customization.sms_settings.sms_settings.send_sms\", receiver_list = mobile_no, msg = message)\r\n            \r\n    except frappe.QueryTimeoutError as e:\r\n        frappe.log_error(f\"Error sending sms {e}\")\r\n        # frappe.enqueue(frappe.call(\"frappe.core.doctype.sms_settings.sms_settings.send_sms\", receiver_list = mobile_no, msg = message), queue=\"long\", job_name=f\"{doc.name}_send_sms\", is_async=True)\r\n        frappe.enqueue(frappe.call(\"victoryfarmsdeveloper.victoryfarmsdeveloper.customization.sms_settings.sms_settings.send_sms\", receiver_list = mobile_no, msg = message), queue=\"long\", job_name=f\"{doc.name}_send_sms\", is_async=True)\r\n    except Exception as e:\r\n        frappe.log_error(f\"Error sending sms {e}\")\r\n        frappe.msgprint(f\"Error sending sms {e}\")\r\n        \r\n        \r\n",
  "script_type": "DocType Event"
 }
]